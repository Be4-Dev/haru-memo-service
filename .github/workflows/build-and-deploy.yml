name: Build & Deploy

# Action 작동 조건 지정
on:
  push: # 저장소에 코드를 push 했을 때 실행할 옵션
    branches: [main]

# 배포용 환경 변수 지정
env:
  APPLICATION_NAME: 'haru-memo' # DockerHub에 등록될 앱의 이름
  APPLICATION_VERSION: 'latest' # DockerHub에 등록된 앱의 버전
  CONTAINER_NAME: ${{ env.APPLICATION_NAME }}
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.APPLICATION_NAME }}
  IMAGE_TAG: ${{ env.APPLICATION_VERSION }}

# Workflow -> Job -> Step -> Task로 이어지는 Git Action 계층 구조
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest # Runner의 OS 환경 지정

    steps:
      # GitHub: 빈 깡통 Runner에 레포 소스코드를 클론으로 가져온 뒤 체크아웃합니다.
      - name: Checkout source code
        uses: actions/checkout@v3

      # Spring Boot: JDK를 설치합니다.
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # Spring Boot: Gradle 실행 권한을 부여합니다.
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # Spring Boot: gradle caching - 빌드 시간 향상
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # Spring Boot: Gradle clean 후 Build를 진행합니다.
      - name: Gradle clean build
        run: ./gradlew clean build --exclude-task test

      # Docker: 도커 허브에 로그인합니다.
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD

      # Docker: docker/build-push-action을 사용하기 위해 Buildx를 설치합니다.
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Docker: 도커 이미지를 빌드한 뒤 도커 허브에 push합니다.
      - name: Build and Push to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: $IMAGE_NAME:$IMAGE_VERSION
          cache-from: type=gha
          cache-to: type=gha, mode=max

  deploy:
    needs: build
    name: Deploy
    runs-on: [self-hosted, haru-memo]

    steps:
      # Docker: 서버에서 실행 중인 haru-memo 앱의 컨테이너가 있다면 종료시킵니다.
      - name: Check if container exists and stop it
        run: |
          if docker ps -q --filter "name=$CONTAINER_NAME" | grep -q .; then
            docker stop $CONTAINER_NAME
            docker rm $CONTAINER_NAME

      # Docker: 서버에 haru-memo 앱의 도커 이미지가 남아있다면 삭제합니다.
      - name: Check if image exists and remove it
        run: |
          if docker images | grep -q "$IMAGE_NAME"; then
            docker rmi $IMAGE_NAME:$IMAGE_TAG

      # Docker: 도커 허브에 로그인합니다.
      - name: Login to Docker Hub
        run: |
          docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_PASSWORD

      # Docker: 도커 허브에서 이미지를 pull 받은 뒤 해당 이미지의 컨테이너를 띄웁니다.
      - name: Pull and Run Docker image
        run: |
          docker pull $IMAGE_NAME:$IMAGE_TAG
          docker run -d -p 8080:8080 --name $CONTAINER_NAME $IMAGE_NAME:$IMAGE_TAG
